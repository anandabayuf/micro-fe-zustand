{"version":3,"file":"static/js/49.adbc2bbe.chunk.js","mappings":"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","sources":["../node_modules/zustand/esm/middleware.mjs","features/Login/store.ts","utils/index.tsx","features/Login/components/Form/index.tsx","features/Login/index.tsx","pages/Login/index.tsx"],"sourcesContent":["const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...a) => api.dispatch(...a), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api)\n    return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extensionConnector) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && enabled) {\n      console.warn(\n        \"[zustand devtools middleware] Please install/enable Redux devtools extension\"\n      );\n    }\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = (state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording)\n      return r;\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...a) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...a);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools)\n              return;\n            if (typeof api.dispatch !== \"function\")\n              return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState)\n              return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, f) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0)\n    f(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  };\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nconst combine = (initialState, create) => (...a) => Object.assign({}, initialState, create(...a));\n\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(\n      name,\n      JSON.stringify(newValue, options == null ? void 0 : options.replacer)\n    ),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst oldImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage;\n  try {\n    storage = options.getStorage();\n  } catch (e) {\n  }\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const thenableSerialize = toThenable(options.serialize);\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    let errorInSync;\n    const thenable = thenableSerialize({ state, version: options.version }).then(\n      (serializedValue) => storage.setItem(options.name, serializedValue)\n    ).catch((e) => {\n      errorInSync = e;\n    });\n    if (errorInSync) {\n      throw errorInSync;\n    }\n    return thenable;\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue) => {\n      if (storageValue) {\n        return options.deserialize(storageValue);\n      }\n    }).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage();\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\nconst newImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persistImpl = (config, baseOptions) => {\n  if (\"getStorage\" in baseOptions || \"serialize\" in baseOptions || \"deserialize\" in baseOptions) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.\"\n      );\n    }\n    return oldImpl(config, baseOptions);\n  }\n  return newImpl(config, baseOptions);\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n","import { AuthStore, AuthStoreVariable } from './types';\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst initialState: AuthStoreVariable = {\n\ttoken: undefined,\n\tuser: undefined,\n};\n\nexport const useAuth = create<AuthStore>()(\n\tpersist(\n\t\t(set) => ({\n\t\t\ttoken: undefined,\n\t\t\tuser: undefined,\n\t\t\tsetToken: (token) => set({ token }),\n\t\t\tsetUser: (user) => set({ user }),\n\t\t\tlogOut: () => set({ ...initialState }),\n\t\t}),\n\t\t{ name: 'auth' }\n\t)\n);\n\nexport const HELLO_WORLD = 'HELLO WORLD!';\n","const MODULE_URL = process.env.REACT_APP_MODULE_URL;\n\nexport const getParsedCookie = (key: string) => {\n\tconst cookie = document.cookie.split(';');\n\n\tfor (let i = 0; i < cookie.length; i++) {\n\t\tconst parsedCookie = cookie[i].split('=');\n\t\tif (parsedCookie[0] === key) return parsedCookie[1];\n\t}\n\n\treturn undefined;\n};\n\nexport const setCookie = (key: string, value: string) => {\n\tconst domain = MODULE_URL?.split('http://')[1];\n\n\tdocument.cookie = `${key}=${value};domain=${domain}`;\n};\n","import React from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useAuth } from '../../store';\nimport { useNavigate } from 'react-router-dom';\nimport { setCookie } from '../../../../utils';\n\nconst LoginForm: React.FC = () => {\n\tconst { setToken, setUser } = useAuth();\n\tconst navigate = useNavigate();\n\n\tconst handleLogin = (value: any) => {\n\t\tif (!value) return;\n\n\t\tconst token =\n\t\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n\n\t\tsetUser(value);\n\t\tsetToken(token);\n\n\t\tsetCookie('user', JSON.stringify(value));\n\t\tsetCookie('token', token);\n\n\t\tnavigate('/', { replace: true });\n\t};\n\n\treturn (\n\t\t<Form\n\t\t\tlayout=\"vertical\"\n\t\t\tonFinish={handleLogin}\n\t\t>\n\t\t\t{}\n\t\t\t<Form.Item\n\t\t\t\tname=\"username\"\n\t\t\t\tlabel=\"Username\"\n\t\t\t>\n\t\t\t\t<Input placeholder=\"input your username\" />\n\t\t\t</Form.Item>\n\n\t\t\t<Form.Item\n\t\t\t\tname=\"password\"\n\t\t\t\tlabel=\"Password\"\n\t\t\t>\n\t\t\t\t<Input.Password placeholder=\"input your password\" />\n\t\t\t</Form.Item>\n\n\t\t\t<Button\n\t\t\t\thtmlType=\"submit\"\n\t\t\t\ttype=\"primary\"\n\t\t\t>\n\t\t\t\tLogin\n\t\t\t</Button>\n\t\t</Form>\n\t);\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from './components/Form';\n\nconst Login: React.FC = () => {\n\treturn <LoginForm />;\n};\n\nexport default Login;\n","import React from 'react';\nimport AppFooter from 'submodule/AppFooter';\nimport AppHeader from 'submodule/AppHeader';\nimport Login from '../../features/Login';\n\nconst LoginPage: React.FC = () => {\n\treturn (\n\t\t<div>\n\t\t\t<AppHeader />\n\t\t\t<Login />\n\t\t\t<AppFooter />\n\t\t</div>\n\t);\n};\n\nexport default LoginPage;\n"],"names":["createJSONStorage","getStorage","options","storage","e","getItem","name","_a","parse","str2","JSON","reviver","str","Promise","then","setItem","newValue","stringify","replacer","removeItem","toThenable","fn","input","result","onFulfilled","catch","_onRejected","this","_onFulfilled","onRejected","persist","config","baseOptions","console","warn","set","get","api","_objectSpread","localStorage","serialize","deserialize","partialize","state","version","merge","persistedState","currentState","hasHydrated","hydrationListeners","Set","finishHydrationListeners","concat","apply","arguments","thenableSerialize","errorInSync","thenable","serializedValue","savedSetState","setState","replace","stateFromStorage","configResult","hydrate","forEach","cb","postRehydrationCallback","onRehydrateStorage","call","bind","storageValue","deserializedStorageValue","migrate","error","migratedState","_a2","setOptions","newOptions","clearStorage","getOptions","rehydrate","onHydrate","add","delete","onFinishHydration","oldImpl","_b","skipHydration","newImpl","initialState","token","undefined","user","useAuth","create","setToken","setUser","logOut","MODULE_URL","process","setCookie","key","value","domain","split","document","cookie","_useAuth","navigate","useNavigate","_jsxs","Form","layout","onFinish","children","_jsx","Item","label","Input","placeholder","Password","Button","htmlType","type","LoginForm","AppHeader","Login","AppFooter"],"sourceRoot":""}